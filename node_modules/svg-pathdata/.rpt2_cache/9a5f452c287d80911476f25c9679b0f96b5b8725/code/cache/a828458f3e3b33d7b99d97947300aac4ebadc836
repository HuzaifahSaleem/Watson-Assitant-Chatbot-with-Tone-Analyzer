{"code":"import * as tslib_1 from \"tslib\";\r\nvar _a;\r\nimport { encodeSVGPath } from \"./SVGPathDataEncoder\";\r\nimport { SVGPathDataParser } from \"./SVGPathDataParser\";\r\nimport { SVGPathDataTransformer } from \"./SVGPathDataTransformer\";\r\nimport { TransformableSVG } from \"./TransformableSVG\";\r\nvar SVGPathData = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SVGPathData, _super);\r\n    function SVGPathData(content) {\r\n        var _this = _super.call(this) || this;\r\n        if (\"string\" === typeof content) {\r\n            _this.commands = SVGPathData.parse(content);\r\n        }\r\n        else {\r\n            _this.commands = content;\r\n        }\r\n        return _this;\r\n    }\r\n    SVGPathData.prototype.encode = function () {\r\n        return SVGPathData.encode(this.commands);\r\n    };\r\n    SVGPathData.prototype.getBounds = function () {\r\n        var boundsTransform = SVGPathDataTransformer.CALCULATE_BOUNDS();\r\n        this.transform(boundsTransform);\r\n        return boundsTransform;\r\n    };\r\n    SVGPathData.prototype.transform = function (transformFunction) {\r\n        var newCommands = [];\r\n        for (var _i = 0, _a = this.commands; _i < _a.length; _i++) {\r\n            var command = _a[_i];\r\n            var transformedCommand = transformFunction(command);\r\n            if (Array.isArray(transformedCommand)) {\r\n                newCommands.push.apply(newCommands, transformedCommand);\r\n            }\r\n            else {\r\n                newCommands.push(transformedCommand);\r\n            }\r\n        }\r\n        this.commands = newCommands;\r\n        return this;\r\n    };\r\n    SVGPathData.encode = function (commands) {\r\n        return encodeSVGPath(commands);\r\n    };\r\n    SVGPathData.parse = function (path) {\r\n        var parser = new SVGPathDataParser();\r\n        var commands = [];\r\n        parser.parse(path, commands);\r\n        parser.finish(commands);\r\n        return commands;\r\n    };\r\n    SVGPathData.CLOSE_PATH = 1;\r\n    SVGPathData.MOVE_TO = 2;\r\n    SVGPathData.HORIZ_LINE_TO = 4;\r\n    SVGPathData.VERT_LINE_TO = 8;\r\n    SVGPathData.LINE_TO = 16;\r\n    SVGPathData.CURVE_TO = 32;\r\n    SVGPathData.SMOOTH_CURVE_TO = 64;\r\n    SVGPathData.QUAD_TO = 128;\r\n    SVGPathData.SMOOTH_QUAD_TO = 256;\r\n    SVGPathData.ARC = 512;\r\n    SVGPathData.LINE_COMMANDS = SVGPathData.LINE_TO | SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO;\r\n    SVGPathData.DRAWING_COMMANDS = SVGPathData.HORIZ_LINE_TO | SVGPathData.VERT_LINE_TO | SVGPathData.LINE_TO |\r\n        SVGPathData.CURVE_TO | SVGPathData.SMOOTH_CURVE_TO | SVGPathData.QUAD_TO |\r\n        SVGPathData.SMOOTH_QUAD_TO | SVGPathData.ARC;\r\n    return SVGPathData;\r\n}(TransformableSVG));\r\nexport { SVGPathData };\r\nexport var COMMAND_ARG_COUNTS = (_a = {},\r\n    _a[SVGPathData.MOVE_TO] = 2,\r\n    _a[SVGPathData.LINE_TO] = 2,\r\n    _a[SVGPathData.HORIZ_LINE_TO] = 1,\r\n    _a[SVGPathData.VERT_LINE_TO] = 1,\r\n    _a[SVGPathData.CLOSE_PATH] = 0,\r\n    _a[SVGPathData.QUAD_TO] = 4,\r\n    _a[SVGPathData.SMOOTH_QUAD_TO] = 2,\r\n    _a[SVGPathData.CURVE_TO] = 6,\r\n    _a[SVGPathData.SMOOTH_CURVE_TO] = 4,\r\n    _a[SVGPathData.ARC] = 7,\r\n    _a);\r\nexport { encodeSVGPath } from \"./SVGPathDataEncoder\";\r\nexport { SVGPathDataParser } from \"./SVGPathDataParser\";\r\nexport { SVGPathDataTransformer } from \"./SVGPathDataTransformer\";\r\n//# sourceMappingURL=SVGPathData.js.map","map":"{\"version\":3,\"file\":\"SVGPathData.js\",\"sourceRoot\":\"\",\"sources\":[\"src/SVGPathData.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/Users/aval/tsdev/SVGPathData/SVGPathData.d.ts","text":"import { TransformableSVG } from \"./TransformableSVG\";\r\nimport { SVGCommand } from \"./types\";\r\nexport declare class SVGPathData extends TransformableSVG {\r\n    commands: SVGCommand[];\r\n    constructor(content: string | SVGCommand[]);\r\n    encode(): string;\r\n    getBounds(): import(\"./types\").TransformFunction & {\r\n        minX: number;\r\n        maxX: number;\r\n        minY: number;\r\n        maxY: number;\r\n    };\r\n    transform(transformFunction: (input: SVGCommand) => SVGCommand | SVGCommand[]): this;\r\n    static encode(commands: SVGCommand[]): string;\r\n    static parse(path: string): SVGCommand[];\r\n    static readonly CLOSE_PATH: 1;\r\n    static readonly MOVE_TO: 2;\r\n    static readonly HORIZ_LINE_TO: 4;\r\n    static readonly VERT_LINE_TO: 8;\r\n    static readonly LINE_TO: 16;\r\n    static readonly CURVE_TO: 32;\r\n    static readonly SMOOTH_CURVE_TO: 64;\r\n    static readonly QUAD_TO: 128;\r\n    static readonly SMOOTH_QUAD_TO: 256;\r\n    static readonly ARC: 512;\r\n    static readonly LINE_COMMANDS: number;\r\n    static readonly DRAWING_COMMANDS: number;\r\n}\r\nexport declare const COMMAND_ARG_COUNTS: {\r\n    [SVGPathData.MOVE_TO]: number;\r\n    [SVGPathData.LINE_TO]: number;\r\n    [SVGPathData.HORIZ_LINE_TO]: number;\r\n    [SVGPathData.VERT_LINE_TO]: number;\r\n    [SVGPathData.CLOSE_PATH]: number;\r\n    [SVGPathData.QUAD_TO]: number;\r\n    [SVGPathData.SMOOTH_QUAD_TO]: number;\r\n    [SVGPathData.CURVE_TO]: number;\r\n    [SVGPathData.SMOOTH_CURVE_TO]: number;\r\n    [SVGPathData.ARC]: number;\r\n};\r\nexport { encodeSVGPath } from \"./SVGPathDataEncoder\";\r\nexport { SVGPathDataParser } from \"./SVGPathDataParser\";\r\nexport { SVGPathDataTransformer } from \"./SVGPathDataTransformer\";\r\n"}}
