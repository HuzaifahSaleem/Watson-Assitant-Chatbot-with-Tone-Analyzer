{"code":"import * as tslib_1 from \"tslib\";\r\n// Parse SVG PathData\r\n// http://www.w3.org/TR/SVG/paths.html#PathDataBNF\r\nimport { SVGPathData, COMMAND_ARG_COUNTS } from './SVGPathData';\r\nimport { TransformableSVG } from './TransformableSVG';\r\n// Private consts : Char groups\r\nvar isWhiteSpace = function (c) { return ' ' === c || '\\t' === c || '\\r' === c || '\\n' === c; };\r\nvar isDigit = function (c) {\r\n    return '0'.charCodeAt(0) <= c.charCodeAt(0) && c.charCodeAt(0) <= '9'.charCodeAt(0);\r\n};\r\nvar COMMANDS = 'mMzZlLhHvVcCsSqQtTaA';\r\nvar SVGPathDataParser = /** @class */ (function (_super) {\r\n    tslib_1.__extends(SVGPathDataParser, _super);\r\n    function SVGPathDataParser() {\r\n        var _this = _super.call(this) || this;\r\n        _this.curNumber = '';\r\n        _this.curCommandType = -1;\r\n        _this.curCommandRelative = false;\r\n        _this.canParseCommandOrComma = true;\r\n        _this.curNumberHasExp = false;\r\n        _this.curNumberHasExpDigits = false;\r\n        _this.curNumberHasDecimal = false;\r\n        _this.curArgs = [];\r\n        return _this;\r\n    }\r\n    SVGPathDataParser.prototype.finish = function (commands) {\r\n        if (commands === void 0) { commands = []; }\r\n        this.parse(' ', commands);\r\n        // Adding residual command\r\n        if (0 !== this.curArgs.length || !this.canParseCommandOrComma) {\r\n            throw new SyntaxError('Unterminated command at the path end.');\r\n        }\r\n        return commands;\r\n    };\r\n    SVGPathDataParser.prototype.parse = function (str, commands) {\r\n        var _this = this;\r\n        if (commands === void 0) { commands = []; }\r\n        var finishCommand = function (command) {\r\n            commands.push(command);\r\n            _this.curArgs.length = 0;\r\n            _this.canParseCommandOrComma = true;\r\n        };\r\n        for (var i = 0; i < str.length; i++) {\r\n            var c = str[i];\r\n            // White spaces parsing\r\n            if (isDigit(c)) {\r\n                this.curNumber += c;\r\n                this.curNumberHasExpDigits = this.curNumberHasExp;\r\n                continue;\r\n            }\r\n            if ('e' === c || 'E' === c) {\r\n                this.curNumber += c;\r\n                this.curNumberHasExp = true;\r\n                continue;\r\n            }\r\n            if (('-' === c || '+' === c) && this.curNumberHasExp && !this.curNumberHasExpDigits) {\r\n                this.curNumber += c;\r\n                continue;\r\n            }\r\n            // if we already have a \".\", it means we are starting a new number\r\n            if ('.' === c && !this.curNumberHasExp && !this.curNumberHasDecimal) {\r\n                this.curNumber += c;\r\n                this.curNumberHasDecimal = true;\r\n                continue;\r\n            }\r\n            // New number\r\n            if (this.curNumber && -1 !== this.curCommandType) {\r\n                var val = Number(this.curNumber);\r\n                if (isNaN(val)) {\r\n                    throw new SyntaxError(\"Invalid number ending at \" + i);\r\n                }\r\n                if (this.curCommandType === SVGPathData.ARC) {\r\n                    if (0 === this.curArgs.length || 1 === this.curArgs.length) {\r\n                        if (0 > val) {\r\n                            throw new SyntaxError(\"Expected positive number, got \\\"\" + val + \"\\\" at index \\\"\" + i + \"\\\"\");\r\n                        }\r\n                    }\r\n                    else if (3 === this.curArgs.length || 4 === this.curArgs.length) {\r\n                        if ('0' !== this.curNumber && '1' !== this.curNumber) {\r\n                            throw new SyntaxError(\"Expected a flag, got \\\"\" + this.curNumber + \"\\\" at index \\\"\" + i + \"\\\"\");\r\n                        }\r\n                    }\r\n                }\r\n                this.curArgs.push(val);\r\n                if (this.curArgs.length === COMMAND_ARG_COUNTS[this.curCommandType]) {\r\n                    if (SVGPathData.HORIZ_LINE_TO === this.curCommandType) {\r\n                        finishCommand({\r\n                            type: SVGPathData.HORIZ_LINE_TO,\r\n                            relative: this.curCommandRelative,\r\n                            x: val,\r\n                        });\r\n                    }\r\n                    else if (SVGPathData.VERT_LINE_TO === this.curCommandType) {\r\n                        finishCommand({\r\n                            type: SVGPathData.VERT_LINE_TO,\r\n                            relative: this.curCommandRelative,\r\n                            y: val,\r\n                        });\r\n                        // Move to / line to / smooth quadratic curve to commands (x, y)\r\n                    }\r\n                    else if (this.curCommandType === SVGPathData.MOVE_TO ||\r\n                        this.curCommandType === SVGPathData.LINE_TO ||\r\n                        this.curCommandType === SVGPathData.SMOOTH_QUAD_TO) {\r\n                        finishCommand({\r\n                            type: this.curCommandType,\r\n                            relative: this.curCommandRelative,\r\n                            x: this.curArgs[0],\r\n                            y: this.curArgs[1],\r\n                        });\r\n                        // Switch to line to state\r\n                        if (SVGPathData.MOVE_TO === this.curCommandType) {\r\n                            this.curCommandType = SVGPathData.LINE_TO;\r\n                        }\r\n                    }\r\n                    else if (this.curCommandType === SVGPathData.CURVE_TO) {\r\n                        finishCommand({\r\n                            type: SVGPathData.CURVE_TO,\r\n                            relative: this.curCommandRelative,\r\n                            x1: this.curArgs[0],\r\n                            y1: this.curArgs[1],\r\n                            x2: this.curArgs[2],\r\n                            y2: this.curArgs[3],\r\n                            x: this.curArgs[4],\r\n                            y: this.curArgs[5],\r\n                        });\r\n                    }\r\n                    else if (this.curCommandType === SVGPathData.SMOOTH_CURVE_TO) {\r\n                        finishCommand({\r\n                            type: SVGPathData.SMOOTH_CURVE_TO,\r\n                            relative: this.curCommandRelative,\r\n                            x2: this.curArgs[0],\r\n                            y2: this.curArgs[1],\r\n                            x: this.curArgs[2],\r\n                            y: this.curArgs[3],\r\n                        });\r\n                    }\r\n                    else if (this.curCommandType === SVGPathData.QUAD_TO) {\r\n                        finishCommand({\r\n                            type: SVGPathData.QUAD_TO,\r\n                            relative: this.curCommandRelative,\r\n                            x1: this.curArgs[0],\r\n                            y1: this.curArgs[1],\r\n                            x: this.curArgs[2],\r\n                            y: this.curArgs[3],\r\n                        });\r\n                    }\r\n                    else if (this.curCommandType === SVGPathData.ARC) {\r\n                        finishCommand({\r\n                            type: SVGPathData.ARC,\r\n                            relative: this.curCommandRelative,\r\n                            rX: this.curArgs[0],\r\n                            rY: this.curArgs[1],\r\n                            xRot: this.curArgs[2],\r\n                            lArcFlag: this.curArgs[3],\r\n                            sweepFlag: this.curArgs[4],\r\n                            x: this.curArgs[5],\r\n                            y: this.curArgs[6],\r\n                        });\r\n                    }\r\n                }\r\n                this.curNumber = '';\r\n                this.curNumberHasExpDigits = false;\r\n                this.curNumberHasExp = false;\r\n                this.curNumberHasDecimal = false;\r\n                this.canParseCommandOrComma = true;\r\n            }\r\n            // Continue if a white space or a comma was detected\r\n            if (isWhiteSpace(c)) {\r\n                continue;\r\n            }\r\n            if (',' === c && this.canParseCommandOrComma) {\r\n                // L 0,0, H is not valid:\r\n                this.canParseCommandOrComma = false;\r\n                continue;\r\n            }\r\n            // if a sign is detected, then parse the new number\r\n            if ('+' === c || '-' === c || '.' === c) {\r\n                this.curNumber = c;\r\n                this.curNumberHasDecimal = '.' === c;\r\n                continue;\r\n            }\r\n            // Adding residual command\r\n            if (0 !== this.curArgs.length) {\r\n                throw new SyntaxError(\"Unterminated command at index \" + i + \".\");\r\n            }\r\n            if (!this.canParseCommandOrComma) {\r\n                throw new SyntaxError(\"Unexpected character \\\"\" + c + \"\\\" at index \" + i + \". Command cannot follow comma\");\r\n            }\r\n            this.canParseCommandOrComma = false;\r\n            // Detecting the next command\r\n            if ('z' === c || 'Z' === c) {\r\n                commands.push({\r\n                    type: SVGPathData.CLOSE_PATH,\r\n                });\r\n                this.canParseCommandOrComma = true;\r\n                this.curCommandType = -1;\r\n                continue;\r\n                // Horizontal move to command\r\n            }\r\n            else if ('h' === c || 'H' === c) {\r\n                this.curCommandType = SVGPathData.HORIZ_LINE_TO;\r\n                this.curCommandRelative = 'h' === c;\r\n                // Vertical move to command\r\n            }\r\n            else if ('v' === c || 'V' === c) {\r\n                this.curCommandType = SVGPathData.VERT_LINE_TO;\r\n                this.curCommandRelative = 'v' === c;\r\n                // Move to command\r\n            }\r\n            else if ('m' === c || 'M' === c) {\r\n                this.curCommandType = SVGPathData.MOVE_TO;\r\n                this.curCommandRelative = 'm' === c;\r\n                // Line to command\r\n            }\r\n            else if ('l' === c || 'L' === c) {\r\n                this.curCommandType = SVGPathData.LINE_TO;\r\n                this.curCommandRelative = 'l' === c;\r\n                // Curve to command\r\n            }\r\n            else if ('c' === c || 'C' === c) {\r\n                this.curCommandType = SVGPathData.CURVE_TO;\r\n                this.curCommandRelative = 'c' === c;\r\n                // Smooth curve to command\r\n            }\r\n            else if ('s' === c || 'S' === c) {\r\n                this.curCommandType = SVGPathData.SMOOTH_CURVE_TO;\r\n                this.curCommandRelative = 's' === c;\r\n                // Quadratic bezier curve to command\r\n            }\r\n            else if ('q' === c || 'Q' === c) {\r\n                this.curCommandType = SVGPathData.QUAD_TO;\r\n                this.curCommandRelative = 'q' === c;\r\n                // Smooth quadratic bezier curve to command\r\n            }\r\n            else if ('t' === c || 'T' === c) {\r\n                this.curCommandType = SVGPathData.SMOOTH_QUAD_TO;\r\n                this.curCommandRelative = 't' === c;\r\n                // Elliptic arc command\r\n            }\r\n            else if ('a' === c || 'A' === c) {\r\n                this.curCommandType = SVGPathData.ARC;\r\n                this.curCommandRelative = 'a' === c;\r\n            }\r\n            else {\r\n                throw new SyntaxError(\"Unexpected character \\\"\" + c + \"\\\" at index \" + i + \".\");\r\n            }\r\n        }\r\n        return commands;\r\n    };\r\n    /**\r\n     * Return a wrapper around this parser which applies the transformation on parsed commands.\r\n     */\r\n    SVGPathDataParser.prototype.transform = function (transform) {\r\n        var result = Object.create(this, {\r\n            parse: {\r\n                value: function (chunk, commands) {\r\n                    if (commands === void 0) { commands = []; }\r\n                    var parsedCommands = Object.getPrototypeOf(this).parse.call(this, chunk);\r\n                    for (var _i = 0, parsedCommands_1 = parsedCommands; _i < parsedCommands_1.length; _i++) {\r\n                        var c = parsedCommands_1[_i];\r\n                        var cT = transform(c);\r\n                        if (Array.isArray(cT)) {\r\n                            commands.push.apply(commands, cT);\r\n                        }\r\n                        else {\r\n                            commands.push(cT);\r\n                        }\r\n                    }\r\n                    return commands;\r\n                },\r\n            },\r\n        });\r\n        return result;\r\n    };\r\n    return SVGPathDataParser;\r\n}(TransformableSVG));\r\nexport { SVGPathDataParser };\r\n//# sourceMappingURL=SVGPathDataParser.js.map","map":"{\"version\":3,\"file\":\"SVGPathDataParser.js\",\"sourceRoot\":\"\",\"sources\":[\"src/SVGPathDataParser.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/Users/aval/tsdev/SVGPathData/SVGPathDataParser.d.ts","text":"import { TransformableSVG } from './TransformableSVG';\r\nimport { SVGCommand, TransformFunction } from './types';\r\nexport declare class SVGPathDataParser extends TransformableSVG {\r\n    private curNumber;\r\n    private curCommandType;\r\n    private curCommandRelative;\r\n    private canParseCommandOrComma;\r\n    private curNumberHasExp;\r\n    private curNumberHasExpDigits;\r\n    private curNumberHasDecimal;\r\n    private curArgs;\r\n    constructor();\r\n    finish(commands?: SVGCommand[]): SVGCommand[];\r\n    parse(str: string, commands?: SVGCommand[]): SVGCommand[];\r\n    /**\r\n     * Return a wrapper around this parser which applies the transformation on parsed commands.\r\n     */\r\n    transform(transform: TransformFunction): this;\r\n}\r\n"}}
